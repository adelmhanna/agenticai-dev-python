services:
  qdrant:
    build:
      context: ./qdrant
      dockerfile: Dockerfile
    container_name: agentic-dev-qdrant-1
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    environment:
      - QDRANT__SERVICE__GRPC_PORT=6334
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333"]
      interval: 10s
      timeout: 5s
      retries: 3

  mongodb:
    image: mongodb/mongodb-community-server:latest
    container_name: agentic-dev-mongodb-1
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=hanna
      - MONGO_INITDB_ROOT_PASSWORD=agenticai2025
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 3

  neo4j:
    build:
      context: ./neo4j
      dockerfile: Dockerfile
    container_name: agentic-dev-neo4j-1
    ports:
      - "7474:7474"
      - "7687:7687"
    volumes:
      - neo4j_data:/data
    environment:
      - NEO4J_AUTH=neo4j/agenticai2025
    healthcheck:
      test: ["CMD", "curl", "-f", "-u", "neo4j:agenticai2025", "http://localhost:7474"]
      interval: 10s
      timeout: 15s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: agentic-dev-minio-1
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    environment:
      - MINIO_ROOT_USER=hanna
      - MINIO_ROOT_PASSWORD=agenticai2025
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 3

  ollama:
    build:
      context: ./ollama
      dockerfile: Dockerfile
    container_name: agentic-dev-ollama-1
    ports:
      - "11434:11434"
      - "11435:11435"
    volumes:
      - ollama_data:/root/.ollama
    environment:
      - OLLAMA_HOST=0.0.0.0:11434
      - EMBEDDER_PORT=11435
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:11434"]
      interval: 10s
      timeout: 5s
      retries: 3

  postgres:
    image: postgres:${POSTGRESQL_VERSION}
    container_name: agentic-dev-postgres-1
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-postgres.sql:/docker-entrypoint-initdb.d/init.sql
    environment:
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_DB=temporal
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "temporal", "-d", "temporal"]
      interval: 10s
      timeout: 10s
      retries: 10

  webapp:
    build:
      context: ./webapp
      dockerfile: Dockerfile
    container_name: agentic-dev-webapp-1
    ports:
      - "8000:8000"
    depends_on:
      qdrant:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      minio:
        condition: service_healthy
      ollama:
        condition: service_healthy
      postgres:
        condition: service_healthy
      temporal:
        condition: service_healthy
      temporal-ui:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    environment:
      - QDRANT_HOST=qdrant
      - MONGO_HOST=mongodb
      - NEO4J_HOST=neo4j
      - MINIO_HOST=minio
      - AWS_ACCESS_KEY_ID=hanna
      - AWS_SECRET_ACCESS_KEY=agenticai2025
      - OLLAMA_HOST=ollama
      - EMBEDDER_PORT=11435
      - POSTGRES_HOST=postgres
      - TEMPORAL_HOST=temporal
      - TEMPORAL_UI_HOST=temporal-ui
      - MOSQUITTO_HOST=mosquitto
    command: >
      sh -c "uvicorn app.main:app --host 0.0.0.0 --port 8000"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 10s
      timeout: 5s
      retries: 3

  temporal:
    image: temporalio/auto-setup:${TEMPORAL_VERSION}
    container_name: agentic-dev-temporal-1
    depends_on:
      - postgres
    ports:
      - "7233:7233"
    environment:
      - TEMPORAL_CLI_ADDRESS=0.0.0.0:7233
      - DB=postgres12
      - DB_PORT=5432
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PWD=${POSTGRES_PASSWORD}
      - POSTGRES_SEEDS=postgres
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    volumes:
      - temporal_data:/temporal
    healthcheck:
      test: ["CMD", "temporal", "operator", "cluster", "health"]
      interval: 10s
      timeout: 60s
      retries: 60

  temporal-admin-tools:
    container_name: agentic-dev-temporal-admin-tools
    depends_on:
      - temporal
    environment:
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CLI_ADDRESS=temporal:7233
    image: temporalio/admin-tools:${TEMPORAL_ADMINTOOLS_VERSION}
    stdin_open: true
    tty: true
  temporal-ui:
    image: temporalio/ui:${TEMPORAL_UI_VERSION}
    container_name: agentic-dev-temporal-ui-1
    ports:
      - "8080:8080"
    environment:
      - TEMPORAL_GRPC_ENDPOINT=temporal:7233
      - TEMPORAL_PERMIT_WRITE_API=true
      - TEMPORAL_ADDRESS=temporal:7233
      - TEMPORAL_CORS_ORIGINS=http://localhost:8000
    depends_on:
      temporal:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080"]
      interval: 10s
      timeout: 5s
      retries: 3

  mosquitto:
    image: eclipse-mosquitto:latest
    container_name: agentic-dev-mosquitto-1
    ports:
      - "1883:1883"
    volumes:
      - /home/hanna/saver/agentic-dev/mosquitto.conf:/mosquitto/config/mosquitto.conf:rw
    healthcheck:
      test: ["CMD", "mosquitto_sub", "-h", "127.0.0.1", "-p", "1883", "-t", "$$SYS/#", "-C", "1", "-i", "healthcheck"]
      interval: 30s
      timeout: 5s
      retries: 3
      start_period: 10s

volumes:
  qdrant_data:
  mongodb_data:
  neo4j_data:
  minio_data:
  ollama_data:
  postgres_data:
  temporal_data: